File Name: ToolSwitcher.cs

What it does:
Controls the tool menu. Only one tool runs at a time. When the dropdown value changes, it enables the selected tool (Straight, Freehand, Rectangle, Circle, Polygon) and disables the others.

Link to Unity:

Add to your Canvas (or a “UI Manager” GameObject).

Drag your TMP_Dropdown to toolDropdown.

Drag your tool components to the slots: straightLineTool, freeDrawTool, rectangleTool, circleTool, polygonTool.

Set dropdown options in this exact order:
0=None, 1=Straight Line, 2=Freehand, 3=Rectangle, 4=Circle, 5=Polygon.

---------------------
File Name: CircleTool.cs

What it does:
Lets you draw a circle on the 2D bed. Press trigger to set center, release to set radius. Generates a closed polyline (in mm) and stores it in StrokeStore on the chosen LaserLayer (e.g., Cut). Supports snap-to-grid via SnapController (hold both triggers = no snap).

Link to Unity:

Add to Managers (or your tools GameObject).

Assign:

aimCamera → XR Camera (or use controller transform if you changed the ray source)

projector → your PlaneProjector

store → StrokeStore.asset

snapCtrl → SnapController

drawTrigger → Right Trigger (Input System)

In ToolSwitcher, plug this into the Circle slot (index 4).

(Optional) Adjust segments for circle smoothness (e.g., 64).

-------------------
File Name: PolygonTool.cs

What it does:
Draws a regular polygon (triangle, square, hex, etc.). Press trigger to set center, release to set radius. Builds a closed polyline (in mm) with sides vertices, optional rotationDeg. Respects snap-to-grid (hold both triggers = no snap).

Link to Unity:

Add to Managers.

Assign: aimCamera, projector, store, snapCtrl, drawTrigger (same as CircleTool).

In ToolSwitcher, plug this into the Polygon slot (index 5).

In Inspector, set sides (≥3) and rotationDeg if needed.

--------------------

File Name: LinePreview.cs

What it does:
Provides a lightweight rubber-band preview using a LineRenderer so users see a temporary line while aiming (e.g., from last confirmed point to current pointer hit). Call Show(a, b) to display, Hide() to clear.

Link to Unity:

Create an empty GO named LinePreview, add LinePreview (it auto-adds a LineRenderer).

Give the LineRenderer a simple Unlit/Color material; keep width tiny (script sets ~1.5 mm).

In your tool scripts (e.g., StraightLineTool):

Cache a reference to LinePreview.

While aiming: preview.Show(worldStart, worldEnd).

On finalize/cancel: preview.Hide().
(You get worldStart/worldEnd by re-projecting your stored mm points and current mm hit back to world using the plane’s transform; ping me if you want the 6-line patch.)

------------------

File Name: DXFExporter.cs

What it does:
Exports all paths in StrokeStore to a simple ASCII DXF (POLYLINE/VERTEX/SEQEND). Useful for laser software that prefers DXF over SVG. Uses mm coordinates and writes layer names (Cut, Score, Engrave) so you can map settings.

Link to Unity:

Add to Managers.

Set store to your StrokeStore.asset.

Add a UI Button labeled “Export DXF” → OnClick → DXFExporter.SaveDXF().

At runtime, file saves to Application.persistentDataPath (check Console for the exact path). Import that DXF into your laser app.

(Context components these rely on — already in your project)

PlaneProjector.cs: converts your pointer ray → bed hit → (x,y) in mm.

StrokeStore.cs: holds all polylines (mm), does Snap(mm) and RDP simplify.

SnapController.cs: snap ON by default; if both triggers held → snap OFF.

StraightLineTool.cs / FreeDrawTool.cs / RectangleTool.cs: existing tools for lines, freehand, and rectangles.

SVGExporter.cs: exports SVG in mm with color layers (Cut=red, Score=blue, Engrave=black).

If you want, I can drop the tiny code snippet to make StraightLineTool automatically drive LinePreview so you don’t have to think about it.

---------------------

File Name: HistoryManager.cs

What it does:
Maintains Undo / Redo history for your geometry. It snapshots the entire StrokeStore.polylines list so you can safely step backward/forward after edits (draw, move, rotate, scale, delete). Call PushSnapshot() before a change to record the previous state.

Link to Unity:

Add to Managers.

Set store → your StrokeStore.asset.

In every tool before modifying store.polylines (adding a new shape, transforming, deleting), call:
FindObjectOfType<HistoryManager>()?.PushSnapshot();

Add UI Buttons:

“Undo” → OnClick → HistoryManager.Undo()

“Redo” → OnClick → HistoryManager.Redo()

(Optional) Bind controller buttons to call Undo() / Redo().

(Context components already in your project)

StrokeStore.cs (data in mm).

Your drawing tools (Straight/Free/Rect/Circle/Polygon) that add/edit polylines.

-------------------

File Name: SelectionTool2D.cs

What it does:
Adds Selection + Transform in 2D. You click (trigger) near a path to select the nearest polyline. Then:

Move with left joystick (X/Y in mm),

Rotate with right joystick X,

Scale (uniform) with right joystick Y,

Commit the change with Grip (records a snapshot for Undo/Redo).

Link to Unity:

Add to Managers.

Set references:

aimCamera → XR Camera

projector → PlaneProjector

store → StrokeStore.asset

history → HistoryManager

Bind inputs (Input System):

selectTrigger → Right Trigger (Press)

commitGrip → Right Grip (Press)

moveAxis → Left Stick (Vector2)

rotateAxisX → Right Stick X (1D axis)

scaleAxisY → Right Stick Y (1D axis)

(Optional) Add as a tool option in your Tool menu (via ToolSwitcher).

(Context components already in your project)

PlaneProjector.cs (ray → bed → mm), StrokeStore.cs, HistoryManager.cs.

------------------------

File Name: LaserPathPreview.cs

What it does:
Renders a live, glowing preview of all paths in StrokeStore using pooled LineRenderers. Color-codes by layer (Cut/Score/Engrave) and updates every frame—like a laser path simulation on the grid.

Link to Unity:

Add to Managers (or as a child of your bed plane).

Set store → StrokeStore.asset.

Create/assign an Unlit/Emission material to lineMaterial (for glow).

If you add it as a child of the bed plane, the mm→m scaling in the script (0.001) will align paths on the plane automatically.

(Context components already in your project)

StrokeStore.cs (mm coordinates), your grid/bed transform from GridRenderer.cs.

------------------------

File Name: MeasurementOverlay.cs

What it does:
Shows live dimensions while you draw or edit:

Straight lines → Length (mm)

Circles → Radius / Diameter (mm)

Polygons/Rectangles → Edge length / Perimeter (mm)
Tools call simple static helpers: ShowLine(mm), ShowCircle(radiusMM), ShowPolygon(edgeMM, perimeterMM), and Hide().

Link to Unity:

Create a World Space Canvas with a TextMeshProUGUI element.

Add MeasurementOverlay to that Canvas.

Assign label → your TMP text (optional follow → a reticle/controller anchor).

Add one-liners in your tools:

StraightLineTool (while aiming current segment):
MeasurementOverlay.ShowLine(Vector2.Distance(working[^1], p)); then MeasurementOverlay.Hide() on finalize/cancel.

CircleTool (while dragging radius):
MeasurementOverlay.ShowCircle(Vector2.Distance(centerMM, p)); then Hide() on release.

RectangleTool (live or on release): compute w, h, per = 2*(w+h); show via ShowPolygon(edgeMM, per) (or use w/h text if you prefer).

PolygonTool (live or on release): compute edge = 2*r*sin(pi/sides), per = edge*sides; show via ShowPolygon(edge, per); Hide() when done.

(Context components already in your project)

Your drawing tools and StrokeStore.cs. TextMeshPro package already present in your project.